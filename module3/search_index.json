[
["index.html", "Module 3 Making sense of spatial data 1 Making sense of spatial data: Overview 1.1 Aims of this module 1.2 How to study for this module", " Module 3 Making sense of spatial data Kimbal Marriott 25/01/2019 1 Making sense of spatial data: Overview This is the third module in the FIT5147 Data Exploration and Visualisation unit. In this module you will learn about common graphics for showing spatial data. That is, data that is naturally associated with a geographic location or region and for which you want to explore the data taking this association into account. 1.1 Aims of this module After completing this module you will: have seen standard visualisations for showing spatial data and know when to use them; have the ability to choose appropriate map projections and an understanding of their limitations; have knowledge of common GIS tools and data formats; have first-hand experience with R and the graphics packages ggmap and leaflet to construct map-based visualisations; have some experience using MapBox, a widely used GeoVis tool. 1.2 How to study for this module In this module we draw on books, journal and conference articles as well as material in the public domain, including a few videos. "],
["how-to-design-a-data-map.html", "2 How to design a data map 2.1 Scale and generalisation 2.2 Coordinate system 2.3 Map projections 2.4 Choice of data map 2.5 Choice of classes 2.6 Aggregation and clustering 2.7 Spatial autocorrelation 2.8 Multivariate visualisation 2.9 Uncertainty 2.10 Summary", " 2 How to design a data map Here we will look at the various decisions and steps involved in designing a data map (or thematic map as they are usually called by cartographers). The first question is whether you should actually be using a data map. In short, you should use a data map if the data is associated with a geographic location or region and you wish to explore or show how this affects the other attributes. Just because data has a geographic location doesn’t necessarily mean that you should show it on a data map. For instance if you are only interested in comparing sales figures for different stores in a company you would better to compare these using a bar chart. However if you are interested in seeing how the location of the store affects sales figures then you should use a data map. This might, for instance, show sales figures for the stores overlaid on a choropleth map of average income broken down by suburb. Before you read further, take a look at some of the data maps Ben Wellington uses in his TED Talk Making data mean more through storytelling (14min). Data maps are one of the more difficult visualisations to design: it is easy to inadvertently create a misleading data map. 2.1 Scale and generalisation Maps can be drawn at very different levels of scale. The scale of a map is often expressed as a ratio of map units to Earth units. This is called the representative fraction. For instance, a scale of 1:10,000 means that 1cm on the map represents 10,000cm = 100m on the earth’s surface. Map scale can be shown using a representative fraction or a graphical bar scale or even given verbally as in “1 inch to the mile.” Graphical bar scales are by far the most easily understood way of showing the scale of a map and should be included whenever the scale is relevant to understanding the data and the scale is relatively consistent over the map. The scale of a map dictates how much detail can be shown. A large scale map shows a small area in detail, while a small scale map shows a large area in less detail. Spatial data sets often contain very detailed information and one part of map design is working out what is the appropriate level of detail to show in the map and then aggregating or generalising the geographic and non geographic data appropriately. For instance, imagine you wish to compare population density. On a map of the world you might show country boundaries, on a map of Australia you might show state boundaries and the capital cities. 2.2 Coordinate system The Earth is roughly speaking a sphere though it bulges a bit at the equator because of the centrifugal forces generated by rotation. Location on the earth’s surface is given by latitude and longitude. The location of Melbourne is given by 37°48′49″S 144°57′47″E. Latitude lines go from east to west and are parallel to the equator. They run from 90ON which is the North Pole to 0O which is the equator down to 90OS which is the South Pole. Longitude lines run at right angles to the latitude lines and are circles running north to south through the poles. Longitude are measured east or west from Greenwich in the UK. They range from 180OW to 0 which is Greenwich to 180OE (which is of course equal to 180OW). Probably like me you can’t remember which is which: lines of longitude are all “long” while lines of latitude vary in size. Lines of latitude are often called parallels as they do not intersect while lines of longitude are called meridians and the meridian through Greenwich is called the Prime Meridian. 2.3 Map projections One of the great difficulties facing map-makers is how to faithfully show the surface of the Earth (a flattened sphere) on a flat piece of paper. A map projection is the mapping between points on the surface of the Earth and the position on the two-dimensional map. You might like your map projection to avoid distorting angles, distances, area and directions. Unfortunately this is impossible: there is no 2D projection that can do this. For maps only showing a small part of the Earth’s surface the distortions are small but for maps showing continents or the entire world the distortions are considerable. As a result dozens of different map projections have been invented. There is no single best projection: the appropriate choice depends upon the task, area covered by the map and the kind of data map. Thus, choosing the right projection is am important part of designing a data map. Projections can be classified depending upon which property they preserve Equal area (or equivalent) projections preserve area. Conformal projections preserve angles locally, Equidistant projections preserve distance from a particular location Azimuthal projections preserve directions from a particular location, while Compromise projections ensure that area and angle distortion is “not to bad.” The most commonly used map projection is that of Mercator. This was invented by Gerard Mercator in 1569. His map was designed to help European sailors who urgently needed nautical charts that allowed them to easily navigate between very distant locations. His map uses a rectangular grid of meridians and parallels. For the meridians to be straight lines the horizontal scale must increase as the latitude increases/decreases moving away from the Equator since the actual distance between meridians decreases until they meet at the North and South poles. The clever part of Mercator’s projection is to smoothly increase the vertical scale as the latitude increases so that the vertical scale always remains the same as the horizontal scale. As a result the distance between the parallels increases as you move away from the Equator even though they are equally spaced on the actual Earth itself. By linking the vertical scale with the horizontal scale Mercator ensured that regions drawn on the map locally retain their shape since the scale around any point on the map was consistent in all directions. Even better, Mercator’s projection ensured that a straight line drawn between two points on the map gives the correct bearing in which to travel between the points. Of course this comes at a price: the scale is not consistent across the map and regions at high latitude are disproportionately large: Furthermore it is not even possible to show the North or South Pole. Nonetheless, the Mercator projection has become the standard map projection, the one that is used on most maps including those of Google and the one that most of us learn our geography from. It is because of this that many of us still think that Greenland is as big as Africa. However, the use of the Mercator projection should not be automatic. While it is familiar, unless you need to navigate around the world it is almost certainly not the best choice of map projection. In 1989 the Committee on Map Projections of the American Cartographic Association released a resolution strongly advocating against the use of rectangular world maps including those based on Mercator’s projection because of the serious, erroneous conceptions that they create. Table 3.2 from Cartography: Thematic Map Design provides a guide to which projection to choose for different purposes and regions. A very reasonable choice for data maps of the world is to use either the Winkel Tripel Projection or the Robinson Projection as both are pleasing looking compromise projections that minimises area and angular distortion. However, if you are creating a data map of the world in which area is important in interpreting the data such as when using a dot map to show total population and density then the Mollweide Projection is a better choice because it is an equal area projection. For showing continent sized areas, a good choice is the Lambert Azimuthal Equal Area Projection appropriately centered on the region. If you are creating a flow map for flows from a single origin and the direction and distance of flow is important, then the ideal choice is an Azimuthal Projection centered on the origin appropriately scaled so that it preserves distance as well as direction from origin to destination. It is worth emphasising that when choosing the map projection you can also choose where to center the map and the point or line(s) for which distortion is minimised: obviously you should choose these so as to minimise distortion of the most importance areas. For smaller regions the choice of map projection is not as important as the amount of distortion is less. All based on: http://matplotlib.org/basemap/users/mapsetup.html (Python) Given the problems with projection it is sometimes worth thinking about another approach: actually showing the Earth as a 3D globe. The disadvantage of this is the difficulty of navigating in 3D space and that curvature means it is impossible to see more than half the globe at once and that depth introduces difficulties in accurately comparing distances and errors. However it does have the advantage that there is no built in bias. What you favourite map projection says about you here 2.4 Choice of data map The next choice when creating a data map is which of the different kinds of data maps to use. Choropleth and prism Choropleth mappings show categorical and ranked (both ordinal and quantitative) data associated with regions that have fixed boundaries. These regions are typically political or administrative boundaries. The data value is usually represented using colour though sometimes a pattern is used and regions on the map are filled with the colour or pattern corresponding to their data value. A prism map is a variant of a choropleth map in which height is used to show the data value. Prism maps are well suited to comparing quantitative data. If using grey-scale it is conventional to use darker colours for higher values and lighter colours for lower values. Choropleth maps can either plot unclassed data, in which case a continuous scale is used, e.g. from white to black, or data segregated into classes in which case distinct colours are associated with each class. It is imperative that a legend is associated with the map, so as to allow the colour encoding to be understood. If the area of the regions varies this can affect how the data is understood. Thus for example, if you show total population for countries, then the extent of large, populous countries such as Russia makes them visually dominate smaller, populous countries like Indonesia. Rather than showing total population it is better to show population density if you are using a choropleth map. In general it is better to show densities rather than totals with choropleth maps. One drawback of choropleth maps is that the data value is shown uniformly throughout the enumeration area but in many cases the real distribution such as population density is not uniform across the region. Dasymetric maps instead use regions, called zones, that have more uniform value. These are computed from the data or inferred from other data sources such as for instance housing density. Once the zone boundaries are computed their data is represented in the same way as in a choropleth map. The choice of colour in a choropleth map is important. We will look at this in more detail when we study the human visual system. Based on: https://cran.r-project.org/web/packages/maps/maps.pdf Dot density Dot density mapping shows quantitative data associated with regions that have fixed boundaries. Dots or some other symbol are drawn on the region in a semi-random distribution. The number of dots is proportional to the data value. It is important to provide a legend showing representative densities, typically low, medium and high. The disadvantage of dot density mapping is that the reader may see patterns in the semi-random distribution that do not actually exist and that reader perception of differences in dot densities is non-linear and it is difficult to see small differences. The advantages are that it can reveal overall patterns and it is suited to multivariate visualisation by using different colours or symbols for different values. Dot placement should be sensitive to land use. For instance when creating a dot map of the population of councils in Melbourne it is a good idea to not place dots on parklands, rivers, lakes or the sea even though these lie within council boundaries. Based on: https://github.com/mikeasilva/dot-density-map Proportional symbol In this kind of map a symbol (such as a circle, triangle, square or pictorial icon) is used to show ordered data associated with either a region or a particular location. The size of the symbol is proportional to the data value. One kind of ordered data that it is not suitable for is interval data, that is quantitative data without a natural 0. Thus temperature should not be shown with this kind of map while population can be. This is because there is a visual implication that absence of the symbol means 0. Care should be taken in the choice of symbol as it is for instance, harder to compare the area of two circles than that of two squares while comparing the area of two stylised airplanes is very difficult. It is important to provide a legend showing representative sized symbols, typically 3-5 values. Most proportional symbols vary the symbol size continuously. However, range grading in which attribute data is divided into groups is also used. This has the advantage that the symbols for each group are clearly distinguishable. Range grading is the same process as class segregation in choropleth mapping. More generally, we can associate more complex statistical graphics such as pie charts, bar charts, time series, etc with regions or locations on a map. This is one way to handle multivariate spatial data but great care needs to be used to make sure that these graphics are eligible and comparable. Proportional Symbol (air pollution) based on: http://oscarperpinan.github.io/spacetime-vis/spatial.html Contour (isarithmic) &amp; three-dimensional maps A useful metaphor for visualising quantitative data that varies continuously across space is to map it to a kind of conceptual height or elevation for each point on the map. The resulting 3D map is then visualised using standard techniques for showing elevation like contours, wire-frames, surfaces or shaded relief. Properly speaking the contours are called isolines and the resulting maps are called isarithmic maps. When using contours, it is helpful to add colour tinting to clearly show the regions between each pair of contours. Personally I like 3D maps and with the rise of cheap 3D visualisation I think their use will increase. The main thing to be aware of is that they only make sense for data that varies continuously, not data that has abrupt changes or discontinuities. Thus they are ideal for showing temperature and possibly for showing crop yield per acre but not so good for showing the distribution of coal mines. Based on https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/filled.contour.html Cartograms Cartograms are also called value-by-area maps. They are for mapping quantitative data with a natural zero, such as population or average income, to regions. In a cartogram a spatial transformation is applied to the region boundaries so that the region area is proportional to the data value. Two forms of cartogram exist: contiguous and non-contiguous. In a contiguous cartogram the regions remain connected but are distorted to change their area. The transformation attempts to preserves shape as much as possible so that the regions are still recognisable. In a non-contiguous cartogram the map is “exploded” so that there is sufficient room between the regions for them to grow in size. In this kind of map the regions preserve their shape but how they fit together is more difficult to see. In a more abstract variant the regions are replaced by a simple geometric shape such as a circle. Cartograms require the reader to be familiar with the underlying geography. Because of the irregular shape of the regions it is difficult to compare their area so they can be difficult to understand. Thus I would not recommend their use in data exploration. However, they can powerfully communicate information such as global health or wealth inequality to stakeholders. For lots of interesting examples take a look at Worldmapper. United States mainland Cartogram, roughly proportional to population (California is full). Based on: https://cran.r-project.org/web/packages/maps/maps.pdf Flow maps Discrete flow maps show the movement of commodities such as goods or people between places. They are also called origin-destination (OD) maps. Most commonly lines connect the origin of the flow with the destination. Arrows indicate the direction of flow while line width or sometimes colour shows the magnitude. Lines are typically bundled together and curved to reduce overlap and cluttering. Proportional symbols may be used to show the magnitude of total flow out of origins and total flow into destinations. It is important to provide a legend showing representative sized symbols and flows, typically 3-5 values. Such maps work well when there are only a few origins or destinations but with many origins and destinations the lines cross and clutter makes it difficult to understand the underlying data. Interactive exploration or aggregation are necessary in this case. Flow maps can also be used to show the magnitude and direction of continuous flows such as wind patterns or magnetic patterns. Often we wish to understand how flow changes over time. Animation is often used for this. Another approach is to use a space-time cube, a kind of 3D discrete flow map where time is the third dimension. Email flow to (red) and from (blue) my secret lair (in Melbourne), including one to Santa and some spam from Africa, China &amp; somewhere in Russia. Line thickness represents quantity. Created with R using library(maps) &amp; library(geosphere). Note the curved ‘great circle’ lines. 2.5 Choice of classes One issue when using a classed choropleth map to show continuous data or range graded proportional symbols is the choice of data classes. The more classes the more complex and sometimes confusing the visualisation becomes but fewer classes can hide or misrepresent the underlying data. When exploring data I would tend to use lots of classes while for presenting results the number of classes should be smaller and designed to show the result you wish to communicate. A typical number of classes is 4-5 though more classes may be used for large amounts of data. Sturges suggests that the number of classes, C, should be \\(C=1+3.3×log(n)\\) where n is the number of observations. Once you have decided the number of classes then you have to decide how to partition the observations into these classes: that is the minimum and maximum value for each class. The class intervals should not overlap and should contain all observations. This is an example of a one dimensional clustering problem. Many techniques are used but among the most common are Equal Interval: Simply divide the data range into C equally sized intervals. Equal Frequency: Compute class intervals so that they have the same number of observations. Thus the intervals correspond to quantiles. If there are 4 classes then the classes correspond to the quartiles. Jenks Optimisation: This chooses the classes so as to minimise the variance within each class while maximising the variance between the classes. An iterative algorithm is used to do this. All of these are reasonable approaches. For exploration Jenks Optimisation probably makes the most sense but it can be difficult to explain to non data scientists. 2.6 Aggregation and clustering A key part of data map design is to choose the level of detail in which you wish to show the spatial data. Too much detail can overwhelm the viewer while too little detail may mean that the reader is lulled into thinking that the data is more homogeneous than it really is. In interactive visualisations the level of detail can be controlled by the user, either implicitly through zooming or explicitly by a control. Spatial aggregation–combining data from adjacent regions to form a bigger region can be quite misleading if not done well. This is because the choice of region boundaries can greatly affect the results of aggregation. As an example the boundaries of electoral districts can change the result of elections and gerrymandering is one way in which politicians can ensure they win an election even though most people do not vote for them. License: Copyright © Monash University, unless otherwise stated. All Rights Reserved. If cells are grouped horizontally rather than vertically aggregation gives a very different result. 2.7 Spatial autocorrelation One of the main reasons for visualising data on a map is to see whether data values are correlated with spatial location (called spatial autocorrelation). Spatial autocorrelation can also be tested using statistics like the Moran coefficient (Moran I) or Geary’s C. When exploring data it is wise to confirm the the correlation identified visually is statistically meaningful. Left: positive spatial autocorrelation; middle: random distribution so no spatial autocorrelation; right: negative spatial autocorrelation. 2.8 Multivariate visualisation We have focused on showing the spatial distribution of a single variable or attribute. However, in most real world applications data has many attributes and it is the interconnection between these different attributes that the data scientist is most interested in exploring. Unfortunately this is difficult as showing the data on a data map means that two visual variables (x position and y position) are already used up and other variables must be used to show different attributes. Some approaches are to use two colours or a mix of colour and texture on a choropleth maps and more complex glyphs on proportional symbol maps. However the most common approach is to show multiple data maps side-by-side with a data map for each attribute or to overlay two data maps. Interaction allows filtering and brushing to show connection between the different attributes or to toggle between the overlays. Multivariate data with brushing, Mildura is highlighted in both maps (but not both data points…). The maps show Access to Alcohol and Transport From: http://www.communityindicators.net.au/files/DoubleMap/atlas.html 2.9 Uncertainty One of the disadvantages of visualisations and maps in particular is that they can mask uncertainty and errors in the data and encourage the viewer to have more trust in the patterns than it warrants. Good data map design should ensure that the visualisation does not install false confidence in the data or patterns. Uncertainty arises in a number of ways: sampling uncertainty or measurement errors in attribute values and positional accuracy are the most common. There are two main ways of showing uncertainty. Intrinsic approaches tightly couple the visualisation of uncertainty with the attribute being visualised. Specialised visual variables including crispness, resolution and transparency are commonly used in intrinsic approaches. On the other hand extrinsic approaches decouple visualisation of uncertainty from visualisation of the attribute and its spatial location. Extrinsic approaches include error bars or a separate data map showing confidence levels. Bowtie plots can be used on a map to show uncertainty in the observed direction (called azimuthal data) to some point of interest. The centre of the bowtie is the location of the observation, the orientation of the bowtie is the direction while the width gives the uncertainty. This is similar to shaded regression lines. Based on: http://gis.stackexchange.com/questions/31294/how-to-visualize-azimuthal-data-with-uncertainties 2.10 Summary In this section we have discussed the various design decisions that need to be made when creating a data map: choice of scale, choice of map projection, choice of data map type and how to group continuous data into classes when this is required. Without considering these choices carefully it is easy to create data maps that are uninformative or even worse, misleading. On the other hand a well designed data map is one of the best ways for exploring spatial data that we have and can be an extremely powerful way of communicating the resulting insights. One of the most highly regarded data visualisations of all time is a data map, by Charles Minard and shows Napoleon’s march on Moscow during the 1812-13 Russian campaign (here). It uses a flow map style graphic to show the movement of Napoleon’s army during the march to Moscow and subsequent retreat. The thickness of the line is proportional to the number of troops. It is a sophisticated multivariate graphic showing the number of soldiers; distance traveled; temperature; troop position and relevant geographic features; direction of travel; and time taken. FURTHER READING This material was based upon Cartography: Thematic Map Design (6th Edition). Borden Dent, Jeff Torguson, Thomas Hodler. McGraw-Hill. 2009. Thematic cartography and geovisualization (3rd Edition). Terry Slocum, Robert McMaster, Fritz Kessler, Hugh Howard. Prentice hall, 2009. Both are good introductions to the design of effective data maps. And Cartographic Map Projections is a good resource about projections. "],
["overview-of-tools-for-creating-data-maps.html", "3 Overview of tools for creating data maps 3.1 GIS 3.2 GIS tools &amp; resources 3.3 GIS data formats", " 3 Overview of tools for creating data maps There are now a wide range of tools that can be used to create data maps. Business intelligence tools like Tableau provide basic data map functionality while R and Python both have packages for creating data maps. Those in R include ggmap and Leaflet. However if you need to do a lot of spatial data analysis then you should think about using specialised GIS software. 3.1 GIS Geographic Information Systems (GIS) date from the late 60s. A modern GIS can be used to capture, store, transform, analyse and visualise spatial or geographical data. Data maps are made by creating a different layers for different kind of data objects, such as towns, borders or rainfall. Elements in the layers have a spatial and sometimes temporal coordinate and the layers are overlaid to form the data map. GIS typically provide good spatial analysis tools and allow smooth transition between different levels of detail. Spatial data is stored in a GIS system in two ways As raster or pixel based data. Arial photos, satellite images, and elevation data are typically stored as raster data. Geographic shapes are typically stored as vector data. Points are used to store location of zero-dimensional features like a mountain peak, lines or poly-lines to store the position of one-dimensional features like roads or rivers, and polygons to store the position and shape of two-dimensional features like lakes or countries. 3.2 GIS tools &amp; resources Esri ArcGIS software is the industry standard in commercial GIS systems. It allows users to combine a wide variety of data sources to create data maps, comes with its own cartographic data and can perform spatial analysis. MapBox, CartoDB, MapInfo, are other commercial GIS tools. The first two currently offer limited functionality for free. QGIS is an open source GIS tool. Google provides Google Fusion Tables, Google Charts and APIs to Google Maps and Google Earth. National Map is a great online GIS tool for quickly viewing Australian government data Open Street Map (OSM) is a great online open source resource for maps. 3.3 GIS data formats Unfortunately a wide variety of different formats are used by GIS software to exchange spatial data. JPEG2000 or GeoTIFF are often used for GIS raster data. Four common formats for GIS vector data exchange are Keyhole Markup Language (KML) – XML based open standard that underlies Google Maps Geography Markup Language (GML) – XML based open standard developed by the Open Geospatial Consortium that also includes raster data. Esri shapefile – widely used format developed by Esri GeoJSON – JSON format used by many open source GIS packages There are tools to convert between these different formats. Vector data may also be specified using SVG the W3C Scalable Vector Graphics standard. "],
["activity-maps-data-with-r.html", "4 Activity: Maps &amp; data with R 4.1 Spatial Visualization with R AKA maps", " 4 Activity: Maps &amp; data with R 4.1 Spatial Visualization with R AKA maps For a long time, R has had a relatively simple mechanism, via the maps package, for making simple outlines of maps and plotting latitude &amp; longitude points and paths on them. Now there are a range of options: e.g. rgdal, rgeos, rmaps, maptools, mapdata (also interactive map options e.g. shiny, D3, leaflet). We’re going to look at the following packages: maps, ggmap &amp; mapproj (and a bit of geosphere): maps; https://cran.r-project.org/web/packages/maps/maps.pdf ggmap; enables visualization by combining the spatial information of static maps from Google Maps, OpenStreetMap, Stamen Maps or CloudMade Maps with the layered grammar of graphics implementation of ggplot2. Also access the Google Geocoding, Distance Matrix, and Directions APIs.(brought to you by the creator of ggplot, Hadley Wickham, see e.g. https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf)”Since ggplot2 is an implementation of the layered grammar of graphics… the coordinate system is fixed to the Mercator projection“http://stat405.had.co.nz/ggmap.pdf mapproj; adds more projections (dozens) see: https://cran.r-project.org/web/packages/mapproj/mapproj.pdf Start with the map library and a map library( maps ) map (&quot;nz&quot;)# what a cute country Location, location, location Here, we are going to introduce 3 different ways to define a location in ggmap. library(ggmap)# load ggmap # Define location 3 ways # 1. location/address myLocation1 &lt;- &quot;Melbourne&quot; myLocation1 # 2. lat/long myLocation2 &lt;- c(lon=-95.3632715, lat=29.7632836)# not &quot;Melbourne&quot; myLocation2 # 3. an area or bounding box (4 points), lower left lon, # lower left lat, upper right lon, upper right lat # (a little glitchy for google maps) myLocation3 &lt;- c(-130, 30, -105, 50) myLocation3 Latitude &amp; longitude One important geo-feature for geo-related applications is getting latitude and longitude of a given address (country, city, suburb, street and etc.). As once you have the location, you will know where to place your visualisation for this data. # Convert location/address to its lat/long coordinates: geocode(&quot;Melbourne&quot;) # Yes, Melbourne is where it&#39;s supposed to be in, in Australia # longitude 144.9633 # latitude -37.814 So now let’s see a map based on location. There are 4 map sources (online services), with multiple map types: stamen: e.g. “terrain”, “toner”, “watercolor” etc. google: “roadmap”, “terrain”, “satellite”, “hybrid” osm: open street map cloudmade: 1000s of maps, but you need an api key In R, try: # or help(get_stamenmap) # also try ?get_googlemap, ?get_openstreetmap and ?get_cloudmademap ?get_stamenmap to see: The get_map function provides a general approach for quickly obtaining maps from multiple sources. myMap &lt;- get_map(location = myLocation2, source = &quot;stamen&quot;, maptype = &quot;watercolor&quot;) ggmap(myMap) If you got an error like: Error: GeomRasterAnn was built with an incompatible version of ggproto. Please reinstall the package that provides this extension. Or Error in get(“f”, environment(CoordMap$train)) : object ‘f’ not found It is because there are some dependency conflicts of the lastest R and ggplot2 package. You need to update your R packages first with (may take around 20 minutes): update.packages(ask = FALSE, checkBuilt = TRUE) After that, you need to install 2 packages: install.packages(c(&quot;curl&quot;, &quot;yaml&quot;)) At last, you can solve this issue by installing the github version packages by: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;hadley/ggplot2@v2.2.0&quot;) devtools::install_github(&quot;dkahle/ggmap&quot;) And then restart your RStudio, and try the code again. Google Maps Let’s try another different source. myMap &lt;- get_map(location = myLocation1, source=&quot;google&quot;, color=&quot;bw&quot;) ggmap(myMap) Let’s also play with the maptype. Please note, you may also need to change the “maptype” parameters. Different source support different map types. Use ?get_googlemap to check. myMap &lt;- get_map(location = myLocation1, source=&quot;google&quot;, maptype=&quot;terrain&quot;, zoom = 10) ggmap(myMap) Try some projections mercator: equally spaced straight meridians, conformal, straight compass courses then compare with e.g. albers (named after Heinrich C. Albers), is a conic, equal area map projection that uses two standard parallels https://en.wikipedia.org/wiki/Albers_projection require(mapproj) # get map data (lat &amp;amp;amp; lon for boundaries in this case) m &lt;- map(&quot;usa&quot;, plot = FALSE) map(m, project = &quot;mercator&quot;) # try mercator first map.grid(m) # draw graticules # change the projection to albers map(m, project = &quot;albers&quot;, par=c(39,45)) map.grid(m) # draw graticules to compare more easily Let’s move on to the whole world. # get unprojected world limits m &lt;- map(&#39;world&#39;, plot = FALSE) # center on New York map(m, proj = &#39;azequalarea&#39;, orient = c(41,-74,0)) map.grid(m, col = 2) # draw graticules Your turn, rotate the map to show Australia (using R). ‘X’ marker on the map map(m, proj = &#39;orth&#39;, orient = c(41,-74,0)) map.grid(m, col = 2, nx = 6, ny = 5, label = FALSE, lty = 2) points( mapproject( list(y = 41, x = -74) ), col = 3, pch = &quot;x&quot;, cex = 2 )# centre on NY Your turn, centre on Melbourne. Label the map map(&quot;state&quot;, proj=&#39;bonne&#39;, param=45) data(state) text( mapproject( state.center ), state.abb ) You may also want to try: map(&quot;state&quot;,proj=&#39;bonne&#39;, param=45) text( mapproject( state.center, proj=&#39;bonne&#39;, param=45 ), state.abb ) However, this does not work. This is because, the default orientation for map and mapproject are different. Data on a map using quick map plot Let’s look at the data first. We are going to use the ggmap built-in data set crime. help(crime) head(crime) This data set is pretty large, here, we will choose a subset from it and plot. murder &lt;- subset(crime, offense == &quot;murder&quot;) qmplot(lon, lat, data = murder, colour = I(&#39;red&#39;), size = I(3), darken = .3 ) Choropleth Map We are going to create a choropleth map of unemployed rate of US. Two data sets will be used here unemp and county.fips. Data always should go first, have a look at data sets first. help(unemp) head(unemp) help(county.fips) head(county.fips) Let’s pre processing the data. We want to split the unemployed rate into 7 intervals (“&lt;2%”,”2-4%”,”4-6%”,”6-8%”,”8-10%”,”&gt;10%”). # use the version installed with maps library! data(unemp) # set up intervals Intervals &lt;-as.numeric( cut( unemp$unemp, c(0,2,4,6,8,10,100) ) ) Then we need to match unemployment data to map regions by fips codes. data(county.fips) Matches &lt;- Intervals[ match( county.fips$fips, unemp$fips ) ] After that, we can prepare the color schema and plot the map. colors &lt;- c(&quot;#ffffd4&quot;,&quot;#fee391&quot;,&quot;#fec44f&quot;,&quot;#fe9929&quot;,&quot;#d95f0e&quot;,&quot;#993404&quot;) # draw map map(&quot;county&quot;, col = colors[Matches], fill = TRUE, resolution = 0, lty = 0, projection = &quot;polyconic&quot; ) State boundaries will make it better. # draw state boundaries map(&quot;state&quot;, col = &quot;purple&quot;, fill = FALSE, add = TRUE, lty = 1, lwd = 0.3, projection = &quot;polyconic&quot; ) Never forget the title and legend. # add title and legend title(&quot;Unemployment by county, 2009&quot;) Legend &lt;- c(&quot;&lt;2%&quot;,&quot;2-4%&quot;,&quot;4-6%&quot;,&quot;6-8%&quot;,&quot;8-10%&quot;,&quot;&gt;10%&quot;) legend(&quot;topright&quot;, Legend, horiz = TRUE, fill = colors) Your turn! Change the intervals to (“&lt;5%”,”5-10%”,”10-15%”,”15-20%”,”20-25%”,”&gt;25%”). Flow Map Based on http://flowingdata.com/2011/05/11/how-to-map-connections-with-great-circles/ Let’s look at how to draw a line on the map. Note: the shortest path between two locations is usually not a straight line on a map, because of the map projection. The shortest path is always the “great circle” that passes through the two points. This is not the same as the path travelled by a vehicle travelling on a fixed bearing which is what is shown on as a straight line using the Mercator projection. library(geosphere) map(&quot;state&quot;) lat_ca &lt;- 39.164141 lon_ca &lt;- -121.640625 lat_me &lt;- 45.213004 lon_me &lt;- -68.906250 inter &lt;- gcIntermediate( c(lon_ca,lat_ca), c(lon_me,lat_me), n = 50, addStartEnd=TRUE ) lines(inter) Now we can draw lines of flights. Again, let’s look at the data first. airports &lt;- read.csv(&quot;http://datasets.flowingdata.com/tuts/maparcs/airports.csv&quot;, header = TRUE) flights &lt;- read.csv(&quot;http://datasets.flowingdata.com/tuts/maparcs/flights.csv&quot;, header = TRUE, as.is = TRUE) head(airports) head(flights) Plot the map and flights. # create a world map and limited it to around US areas. xlim &lt;- c(-171.738281, -56.601563) ylim &lt;- c(12.039321, 71.856229) map( &quot;world&quot;, col=&quot;#f2f2f2&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05, xlim=xlim, ylim=ylim ) fsub &lt;- flights[flights$airline == &quot;AA&quot;,] for(j in 1:length(fsub$airline)) { air1 &lt;- airports[ airports$iata == fsub[ j,]$airport1,] air2 &lt;- airports[ airports$iata == fsub[ j,]$airport2,] inter &lt;- gcIntermediate( c( air1[1,]$long, air1[1,]$lat ), c( air2[1,]$long, air2[1,]$lat ), n = 100, addStartEnd = TRUE ) lines(inter, col=&quot;black&quot;, lwd=0.8) } So what can/can’t you do with ggmap? Compare R tools with other options, e.g. GIS tools, also Tableau Public, Google FusionTables. "],
["activity-shape-files-maps-with-r.html", "5 Activity: Shape files &amp; maps with R", " 5 Activity: Shape files &amp; maps with R Shapefiles A shapefile, sometimes called an ESRI shapefile (aka Environmental Systems Research Institute) is a format for storing the location, shape, and attributes of geographic features. It is stored as a set of related files (about a dozen). We require a minimum of 3 files: .shp — shape format; the feature geometry itself .shx — shape index format; a positional index of the feature geometry to allow seeking forwards and backwards quickly .dbf — attribute format; columnar attributes for each shape, in dBase IV format (how old is that!) https://en.wikipedia.org/wiki/Shapefile The files (.shp, .shx, .dbf) should all have the same prefix (e.g. NZ.shp, NZ.shx, NZ.dbf). We require 3 sets of files in this activity, you can download them from here: NZ World US parks maptools library is one option to load shapefiles in R. Install the library first. Load the library. library(maptools) Look carefully at your RStudio console. There might be an warning: So, according to the prompt message, you should run gpclibPermit() If it is still not work, that means you need to install another package. Remember the other way to install a package? install.packages(&quot;gpclib&quot;) gpclibPermit() Load the library again, and you should be ready to use maptools library. If there are errors when you try to install the gpclib library (mostly happened on Windows). You should download the RTools at https://cran.r-project.org/bin/windows/Rtools/. Install it in a path without any space. After that, you should be able to install the gpclib library. Unzip your downloaded NZ shapefile and place the 3 files (NZL_adm0.shp, NZL_adm0.shx and NZL_adm0.dbf) into your working directory. Now everything is ready, do not wait, just plot it: nz &lt;- readShapeSpatial(&quot;NZL_adm0&quot;) plot(nz) Be patient, takes a bit time. Also, the plot is a bit…unexpected. Any way, move on to the world! Move the 3 files (ne_110m_land.shp, ne_110m_land.shx and ne_110m_land.dbf) to your working directory. world &lt;- readShapeSpatial(&quot;ne_110m_land&quot;) plot(world) Let’s plot it in another way (with ggplot). library(ggplot2) world_shp &lt;- readShapePoly(&quot;ne_110m_land.shp&quot;) ggplot( world_shp, aes( x=long, y=lat, group=group ) ) + geom_path() Head into the detail of world_shp. You may get confused about the stored structure. You can use fortify() to transfer it to our familiar tabular format. Note: this is not necessary. head(world_shp) world_map &lt;- fortify(world_shp) # convert into a tabular structure head(world_ma And use the tabular format to plot. ggplot( world_map, aes( x=long, y=lat, group=group ) ) + geom_path() Let’s do a shape file on a map National parks of America on top of the West coast. From: http://blog.mollietaylor.com/2013/02/shapefiles-in-r.html First, put the 3 files (ne_10m_parks_and_protected_lands_area.shp, ne_10m_parks_and_protected_lands_area.shx and ne_10m_parks_and_protected_lands_area.dbf) into your working directory. and read them. library(ggmap) # Load the shapes and transform library(maptools) area &lt;- readShapePoly(&quot;ne_10m_parks_and_protected_lands_area.shp&quot;) area.points &lt;- fortify(area) # transform Now let’s have a look at how the parks distribute. # Add some colour library(RColorBrewer) colors &lt;- brewer.pal(9,&quot;BuGn&quot;) # Get the underlying map, it may take a while to get (from google), patience... mapImage &lt;- get_map( location = c(lon=-118,lat =37.5), color = &quot;color&quot;, source=&quot;google&quot;, maptype = &quot;terrain&quot;, zoom =6 ) # Put the shapes on top of the map ggmap(mapImage) + geom_polygon( aes(x=long, y=lat, group=group), data = area.points, color = colors[9], fill = colors[6], alpha =0.5 ) + labs(x=&quot;Longitude&quot;, y=&quot;Latitude&quot;) Step by step. # Plot the base map plot(mapImage) Then the parks without the base map. # And the parks without the map... p &lt;- ggplot() # a blank p + geom_polygon( aes(x=long, y=lat, group=group), data=area.points, color=colors[9], fill=colors[6], alpha =0.5 )+ labs(x=&quot;Longitude&quot;, y=&quot;Latitude&quot;) And we can stack them layer by layer. We still forget something. Remember the unexpected NZ at the beginning? Why does a huge shape file result in such a small plot (NZ)? (one theory is that there are lots of little islands, another is that there are too many sheep) Don’t forget to restore NZ to it’s former glory nz &lt;- map_data(&quot;nz&quot;) #Prepare a map of NZ nzmap &lt;- ggplot(nz, aes(x = long, y = lat, group = group)) + geom_polygon(fill = &quot;gold&quot;, colour = &quot;gold&quot;) # Plot it in cartesian coordinates # nzmap # With correct mercator projection nzmap + coord_map() # With the aspect ratio approximation # nzmap + coord_quickmap() What formats are these built-in maps, e.g. map_data(“nz”), is it a .shp? How old is this ESRI format? What are some more recent alternatives? Can you open just the .shp files (and view shapes) – in R? Some other way? "],
["activity-leaflet-with-r.html", "6 Activity: Leaflet with R 6.1 Introduction 6.2 Marker 6.3 Choropleth Map 6.4 Work with Shiny", " 6 Activity: Leaflet with R 6.1 Introduction Leaflet is an open-source JavaScript library for interactive maps. A basic interactive map (pan &amp; zoom &amp; markers &amp; etc…) can be created very easily with leaflet. The leaflet R package allows you to use Leaflet interactive maps in R in an easy way. We start by installing the package “leaflet“. Let’s start mapping…. The very first map with leaflet. m &lt;- leaflet() %&gt;% setView(lng = 145.0431, lat = -37.8773, zoom = 15) %&gt;% addTiles() m If there is an error of cannot find “httpuv” library, please install it and run the code again. There is a very “modern” way to use leaflet with the %&gt;% operation. The basic idea is to use the result of the previous function as the first parameter of the next function. Check magrittr pipe operator for details. Or we can do it in the old fashioned way: m &lt;- leaflet() m &lt;- setView(m, lng = 145.0431, lat = -37.8773, zoom = 15) m &lt;- addTiles(m) m You may already notice, the map is plotted in the “Viewer” tab instead of the normal “Plots” tab. This is because the leaflet R package is still using the leaflet javascript package and the “Viewer” tab is basically a small web browser. You can also customise your tile. m %&gt;% addProviderTiles(&quot;Stamen.Toner&quot;) use help(addProviderTiles) to check other available tiles. 6.2 Marker The data is ready for you in: vet_schools_in_victoria. Load it as usual and have a look. library(leaflet) data &lt;- read.csv(&quot;vet_schools_in_victoria.txt&quot;) head(data) This data set is very large. Let’s place the first 30 records on the map first. leaflet(data = data[1:30, ]) %&gt;% addTiles() %&gt;% addMarkers(~longitude, ~latitude, popup = ~as.character(location)) Click on the markers, find out what’s the text about. Try the whole data set. leaflet(data = data) %&gt;% addTiles() %&gt;% addMarkers(~longitude, ~latitude, popup = ~as.character(location)) That’s terrible… But our map is interactive, we should be able to cluster the data and allow the user to zoom into the details. leaflet(data = data) %&gt;% addTiles() %&gt;% addMarkers( ~longitude, ~latitude, popup = ~as.character(location), clusterOptions = markerClusterOptions() ) 6.3 Choropleth Map Download our familiar data set again: Household-heating-by-State-2008.csv. Let’s pre-process the data as usual. data &lt;- read.csv(&quot;Household-heating-by-State-2008.csv&quot;, header=T) names(data)[4] &lt;- &quot;MobileHomes&quot; ag &lt;- aggregate(MobileHomes ~ States, FUN = mean, data = data) ag$States &lt;- tolower(ag$States) Let’s prepare the map data and link the two data sets. library(maps) mapStates &lt;- map(&quot;state&quot;, fill = TRUE, plot = FALSE) # find the related rate for each state rates &lt;- ag$MobileHomes[match(mapStates$names, ag$States)] Now, it is time to use leaflet. library(leaflet) cpal &lt;- colorNumeric(&quot;Blues&quot;, rates) # prepare the color mapping leaflet(mapStates) %&gt;% # create a blank canvas addTiles() %&gt;% # add tile addPolygons( # draw polygons on top of the base map (tile) stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~cpal(rates) # use the rate of each state to find the correct color ) You may also notice some parts are not colored. Let’s check out why. mapStates$names ag$States As you can see, “washington” is split into different parts in mapState, and so the strings do not match. Data processing again. # split the string with : as seperator spliteNames &lt;- strsplit(mapStates$names, &quot;:&quot;) # get first part of the origin string; # e.g. get washington from washington:san juan island firstPartNames &lt;- lapply(spliteNames, function(x) x[1]) rates &lt;- ag$MobileHomes[match(firstPartNames, ag$States)] Now plot again. cpal &lt;- colorNumeric(&quot;Blues&quot;, rates) # prepare the color mapping leaflet(mapStates) %&gt;% # create a blank canvas addTiles() %&gt;% # add tile addPolygons( # draw polygons on top of the base map (tile) stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~cpal(rates) # use the rate of each state to find the correct color ) Compare it with creating choropleth map in R using in previous activities, Google Fusion Table and Tableau. Which one do you prefer and WHY? Here, we are using the built-in map data map(\"state\", fill = TRUE, plot = FALSE), if you cannot find your map data in the built-in maps, leaflet can also handle shapefiles. You will need rgdal library to read your shapefile and it is available at: World shape file. Unzip it and put the very important 3 files (ne_50m_admin_0_countries.shp &amp; shx &amp; dbf) into your working directory. Also we need the data for colors. Here we provide the GPD data for countries. Reading the data first, there are different ways to load the data. If you cannot read the map, it is because of different file path system on different operating systems. Have a try with the other way. library(rgdal) world_map &lt;- readOGR(&quot;ne_50m_admin_0_countries.shp&quot;) gdp_data &lt;- read.csv(&quot;WorldGDP.txt&quot;) OR world_map &lt;- readOGR(&quot;.&quot;, &quot;ne_50m_admin_0_countries&quot;) Match the gdp to each country. rates &lt;- gdp_data$GDP[match(world_map$admin, gdp_data$Name)] Create the map library(leaflet) qpal &lt;- colorQuantile(&quot;Blues&quot;, rates, 12) # prepare the color mapping leaflet(world_map) %&gt;% # create a blank canvas addTiles() %&gt;% # add tile addPolygons( # draw polygons on top of the base map (tile) stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~qpal(rates) # use the rate of each state to find the correct color ) If you read carefully enough, you may find two different functions are used for color mapping. colorQuantile colorNumeric Investigate what’s the difference between them. There is also some mismatching… The reason might be the same as our previous US one, can you fix it? Also be careful with your own data! 6.4 Work with Shiny Leaflet can also integrate into your Shiny app easily. Here, we are also introducing a new way to write a Shiny app, with all the code in one file. library(shiny) library(leaflet) ui &lt;- fluidPage( # create map canvas on the page leafletOutput(&quot;mymap&quot;), # create a button, and bind it to the recalc event actionButton(&quot;recalc&quot;, &quot;New points&quot;) ) server &lt;- function(input, output, session) { # event handle, in this case for click event points &lt;- eventReactive(input$recalc, { # calculate normal distribution random points around Melbourne cbind(rnorm(40) * 3 + 145.0431, rnorm(40) -37.8773) }, ignoreNULL = FALSE) output$mymap &lt;- renderLeaflet({ # create leaflet map leaflet() %&gt;% addTiles() %&gt;% # use the random generated points as markers on the map addMarkers(data = points()) }) } shinyApp(ui, server) Create a new file and paste the above code to your RStudio (and understand it!). Create a new file and paste the above code to your RStudio (and understand it!). More details on the integration with Shiny is available at: https://rstudio.github.io/leaflet/shiny.html (the D section is also based on this material). "],
["activity-introduction-to-mapbox.html", "7 Activity: Introduction to Mapbox 7.1 What is MapBox? 7.2 What do I need to do? 7.3 How do I sign up? 7.4 Mapbox Studio Intro 7.5 Exercises", " 7 Activity: Introduction to Mapbox 7.1 What is MapBox? Founded only in 2010, Mapbox (https://www.mapbox.com) has quickly become the go-to place for custom designed maps. It is currently used in mobile and web applications like snapchat, lonely planet or airbnb. Building on open data sources like OpenStreetMap and NASA it offers an easy way to create highly customised maps to present your geospatial datasets. Via an access token Mapbox maps can be integrated into a webpage (explained here) but also in public tableau, R applications (with leaflet) or, since February 2018, into Jupiter notebooks. 7.2 What do I need to do? In order to use Mapbox you have to sign up. The Pay-as-you-go plan includes 50,000 free views of your web application as well as 5GB dataset storage and 50GB tileset storage, which is way beyond what we are going to do in our exercises. You then have access to Mapbox studio, where you can load default maps or customize maps to fit to your application. You can also load geospatial datasets to add markers. With a bit of Javascript, namely the Mapbox GL JS library, you can add interactivity to your maps. In the following exercises, we will first customize a map in two ways, then work with a dataset and finally include a map in a webpage. Note that while Mapbox studio runs in your browser in order to follow along with that last part of this tutorial you need to have a code editor (e.g. atom or brackets) installed. 7.3 How do I sign up? Go to the Mapbox webpage: https://www.mapbox.com Click on ‘Get started for free’ On the new page, sign up Once you’re done you will see this image: Click on the ‘Mapbox Studio’ link to get to your home page. You’re now ready to create beautiful maps! 7.4 Mapbox Studio Intro You are now on your home page of Mapbox Studio. Should you have already signed up before the tutorial and you are now logging on you probably first landed on your Account page. You can switch to Studio on the top left. In the submenu on the top right, you can switch to Styles, Tilesets and Datasets. It is time to find out how Mapbox Studio works! Under the Datasets tab you can upload your own datasets. A dataset is an editable collection of GeoJSON features. It can be either a csv or a GeoJSON file which has to contain the geographical coordinates of your data points. You can also create a new dataset, edit your data and add or delete points. The uploaded dataset needs to be exported into a tileset so it can be used as a layer on a map. We will explore the datasets tab more in Exercise 2a. Under the Tilesets tab you have access to some default tilesets but once you turn your own datasets into tilesets they will also be stored here. A tileset is a collection of raster or vector data broken up into a uniform grid of square tiles at 22 pre-set zoom levels. They are the main mechanism to determine map views (panning and zooming). We will be using the tilesets tab in Exercise 2b. The Styles tab is where most of the magic happens. A style is simply a JSON object that contains all the rules for what features to draw on the web page and how to draw them. Each layer you add to a style in the Mapbox Studio style editor is added to this JSON object via the Styles API when you save and subsequently passed to the browser when the map is requested. Once created, you can keep your style hosted with Mapbox to serve to your map or you can download the JSON object as a document. So, with styles you can control almost everything about the map and change details like the fonts, colors and icons. On a somewhat more technical level a map style consists of sources: links to all of the data that will be styled on the map. When creating a style with the Mapbox Studio style editor, sources are raster and vector tilesets in your Mapbox account sprites: a link to all of the images and icons that are used in the style glyphs: a link to all of the fonts that are used in the style layers: a list of rules for how the data in sources should be displayed on the map Enough theory for now. Let’s get cracking 7.5 Exercises 5.1a Create a customized map Switch to the Styles tab and click ‘New style’. You have a number of templates to choose from. Choose ‘Basic’, call it ‘MyFirstMap’ and click ‘Create’. The Styles editor opens automatically. The Map shows the center of Paris. Zoom out to see a world view. On the left you see the list of the layers used in this style. Let’s change a few properties! Click the ‘water’ layer. In the color tab, click on the hex value (in the textbox under Set Value). Use the color picker to make the ocean a bit darker. Copy the value, click on the ‘waterway’ layer and change the color to the same hue. Click on the ‘background’ layer and again use the color picker to change the color to a light orange. To change the color of parks and national parks click ‘Filter layers’ and choose ‘Filter by value’, then ‘Colors’. Choose the light green color (#d2edae). This filters down to the two layers ‘landuse_park’ and ‘landuse_overlay_national_park’. Using Shift-Key, choose both. Change the color to a nice sappy green. Remove the filter. So much for the colors. Go ahead and change the color of the countries outlines (admin_country), roads (road_major and road_minor) or buildings if you want to. Now let’s change the country labels. Zoom out until you see the labels of countries and some major cities. Go to the ‘country_label’ layer and switch the Font to ‘Open Sans Extrabold’. Go to the Transform property and switch from Tt to T. Try changing other properties like the letter spacing, line height or halo. In Mapbox maps can also be styled according to the zoom level. This way the contrast between colors can be set different at high zoom levels and low zoom levels and the transition can be fluid. Go back to ‘background’. This time, go to ‘Color’ &gt; ‘Value options’ &gt; ‘Set value by zoom’. You’ll see that the entire zoom range (0-22) is set to your color. Click on the color where Zoom level is set to 0 and choose a darker hue. Add another stop. By default, the new level is set to 19. Change it to 10. Change the color to a medium hue between the others (or be adventurous and switch to an entirely different color). Zoom in and out to see the effect. If you haven’t changed the buildings yet they might now look a little bland. Add a zoom to go with your other style changes. Note that buildings only show up at zoom level 15 or higher so you need to take that into account. Once you’re happy with your design you can save your map creation. Click ‘Publish Style’ at the top right corner. Use the slider (blue dot with arrows) to compare the default map with your own stylish map. Isn’t it beautiful! Click publish. Congratulations! You just saved your first map. Find it in the Styles section of Mapbox Studio. 5.1b Create a customized map using Cartogram Mapbox offers an easy and fun way to fit a map to the color values of a logo or image. Go to the Home tab. From the list on the right side, click ‘Try Cartogram’. Click on the ‘center’ icon (on the top right) and allow Mapbox to automatically zoom to your current location. Download the seal image. Drag it onto the image on the bottom left corner of the browser. Pretty brownish. Switch from ‘Colorful’ to ‘Light’ and ‘Dark’. Not much better. Needs some customizing! Switch to ‘Custom’. On the seal image drag around the circles for water, land, building, label and road until you’re happy with the map. Click on ‘Saved style!’ to get back to Mapbox studio where your new style is waiting for you. Additional: Try your own image. Additional: Discuss why cartogram is not a good name for this service. 5.2a Work with your data Australia is big. And things are big in Australia. You could even say that big things are a thing here. It is estimated that there are about 150 ‘Big things’ to be seen on Australian roads. Let’s use my personal Top Ten for the next exercise: Download the dataset BigThings.txt (Please change the file name to “BigThings.geojson”). In Mapbox studio go to the Datasets tab and click ‘New dataset’, then ‘Upload’ Drop the BigThings.geojson into the panel and confirm, then create (keep the name) Click at the data you just created Now we can start editing: Let’s add another data point to the set. One pretty big thing is still missing from the map, Australia’s biggest rock. On the top right, type ‘Uluru’ into the search box, then select ‘Uluru, Uluru-Kata Tjuta National Park, Northern Territory, Australia’. On the top left, click the first tab ‘Draw a point’. Bring the cross hair over ‘Uluru (Ayers Rock)’ and click. A yellow dot appears. You have added a data point. Now add some properties. Click ‘+ Add property’, then name the field ‘title’ and the value ‘Uluru’. Note that fields are case sensitive and you have to enter ‘title’ in lower case letters (otherwise your tooltips will not work properly later). Add a second property, name the field ‘description’ and the value ‘A giant rock’ Then save the changes (by clicking the “Save” button on the right top). You’ve just saved a point to a map without downloading and installing special GIS software that might not even run on your system (ArcGIS only runs on Windows). How fantastic is that! In this exercise we will only set a point, but note that you can also draw a line or a polygon and mark up maps just as you need it. Under ‘search dataset’ you can navigate your data points and access and change the properties you have set again. You can also export your work as a geojson file to use somewhere else. 5.2b Add the data points to your custom map Now click ‘Export’ to export your data as a tileset. This can take a little while and the notification pop up will tell you when the new tileset is uploaded. You can directly click on the ‘BigThings’ tileset in notifications but you will also find it in your tilesets tab. To bring your new tileset onto a map you have to create a new map first and then add a new layer with the tileset as a source. Switch to Styles tab, click ‘New Style’, call the new style ‘BigThings’ and choose ‘Streets’. Create the style. Now click the ‘+ Layer’ button. Then, next to ‘Source’, click into the field to select your ‘BigThings’ tileset (you might need to scroll down a bit). The new style shows up on a dark map by default. The data points are shown as Type &gt; Circle. That works, but we will change it to ‘Symbol’ so we can add an icon later. Create the layer. Voila! You’ve just added your own data points to the map. They show as a new layer on top of all other layers on the list to the left. Now pan and zoom to Australia. The data points are not showing on the map yet! That’s because we switched to a text field. Let’s add an icon to mark our big things. If you’re not there already, click the ‘bigthings’ layer and go to ‘Style’. If you created your map with circles you can still switch to ‘Symbol’ on the ‘Select data’ tab. Go to the second tab ‘Icon’ &gt; ‘Image’ and click into the text box (under ‘Value’ options). Note that if you click ‘Manage Icons’ you can upload your own markers in SVG format. As before, click ‘Publish style’, use the slider to compare your work, then press ‘Publish’. In the next pop up window, go to ‘Share, develop, and use your style’. You are now back in the Styles tab. When you scroll down a little under ‘Develop with this style’ you can see a Style URL and an Access token. We will need both of them to make your map interactive in the browser in the next part. 5.2c Make your pointers interactive In this final part of the exercise you will show your map in a browser window add tooltips to your map so it will display some information when a marker is clicked For this part, we will use a text editor to add some information to a HTML file. We will give you a proper introduction to HTML, CSS and Javascript in a later tutorial so for now just follow along with this exercise. Install a code editor if you haven’t one on your machine already. I like atom, but any editor will do. Of course, you can also use an IDE like webstorm should you be familiar with one. Download the mapbox-activity-index.html file. Open it in your editor. Now copy your access token from the Styles tab in Mapbox. You can also always find your access token on your Account page. In your text editor, replace the String (in bold) in the line mapboxgl.accessToken = ‘pk.eyJ1IjoibW9uYWxlbmEiLCJhIjoiY2l6dzFuenBzMDFvYjMyazdhcWMwd2dsMCJ9.xlKLbnrGSgAjxHLOM6JbVw’; with your own access token Then copy your style URL (from the drop-down menu to the right of your style) and also replace the string ‘your-style-URL-here’ in the line style: &#39;your-style-URL-here&#39; // replace this with your style URL Save the file and double click to open it in a browser. You should now see the map with your markers (sometimes it takes a bit of time to load). Let’s add our tooltips. In your editor, add the following code right above the tag and replace the string ‘layer-name-here’ with the name this layer has in your styles editor (if you followed along with this exercise it is probably ‘bigthings’). map.on(&#39;click&#39;, function(e) { var features = map.queryRenderedFeatures(e.point, { layers: [&#39;layer-name-here&#39;] // replace this with the name of the layer }); if (!features.length) { return; } var feature = features[0]; var popup = new mapboxgl.Popup({ offset: [0, -15] }) .setLngLat(feature.geometry.coordinates) .setHTML(&#39;&lt;h3&gt;&#39; + feature.properties.title + &#39;&lt;/h3&gt;&lt;p&gt;&#39; + feature.properties.description + &#39;&lt;/p&gt;&#39;) .setLngLat(feature.geometry.coordinates) .addTo(map); }); We are using a couple of different mapbox GL JS functions here. The on-click function listens for a click event The queryRenderedFeatures method generates a list of all points and their associated properties The mapboxgl.Popup method is used to create the tooltip Save and refresh your browser. Click on a marker. Tooltips! This is but a brief introduction to Mapbox and there are many more things you can do with it. If you want to find out more you could Work through this 2-part tutorial on how to create a choropleth map. Consult the Mapbox GL JS manual for more advanced browser display options. "]
]
